{
 "id": "402868",
 "text": "In computer science, a low-level programming language is a programming language that involves knowledge of both computer hardware and the coding used to make the computer hardware perform actions. The advantage of low-level programming languages compared to high-level programming languages is that they can directly communicate with the computer hardware to do actions. There is less need for an interpreter to convert programming languages into code that the computer understands. Low-level programming languages require knowledge of the hardware to make the most of what the hardware can do. The term \"low-level\" usually refers to assembly language. A programming language can be called \"low-level\" because the actions the code describes are close to the computer hardware. A \"high-level\" language can be seen as \"far away\" or \"high above\" the computer hardware and closer to the programmer. ==Features of low-level programming languages== What determines a programming language as \"low-level\" depends on how much the programming language relies on hardware knowledge. Programming languages that require more knowledge about computer hardware are called \"low-level\" programming languages. It doesn't matter whether a programming language is considered easy to learn or not. Rather than focus on what the program will output regardless of computer hardware, low- level programming languages deal directly at the computer hardware. Low-level programming languages will aim at what the hardware will actually do to make the actions that have been programmed. An interpreter is required to translate high-level programming language for low-level programming languages to tell the hardware what to do. Low-level programming languages often use more technical code that is clearer for the hardware to understand. Low-level programming languages are generally harder to do than high-level programming languages due to how technical the syntax is (i.e. the structure of the coding is difficult to understand because of how complex it is). Low-level programming languages are often tied to a particular CPU or instruction set. For example, a program written in ARM assembly language cannot run on an x86 processor without emulation. Category:Programming languages",
 "title": "Low-level programming language"
}
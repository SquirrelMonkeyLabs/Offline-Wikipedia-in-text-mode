{
 "id": "140775",
 "text": "Kerberos (pronounced \"kur-ber-uhs\") is a computer network authentication protocol, which allows people communicating over a non-secure network to prove their identity to one another in a secure manner. It is also a suite of free software published by Massachusetts Institute of Technology (MIT) that implements this protocol. Its designers aimed primarily at a client-server model, and it provides mutual authentication — both the user and the server verify each other's identity. Kerberos protocol messages are protected against spying and replay attacks. Kerberos performs authentication as a trusted third party authentication service by using cryptographic shared secret under the assumption that packets traveling along the insecure network can be read, modified, and inserted. Kerberos builds on symmetric-key cryptography and requires a key distribution center. Extensions to Kerberos can provide for the use of public-key cryptography during certain phases of authentication. == History and development == MIT developed Kerberos to protect network services provided by Project Athena. The protocol was named after the Greek mythological character Kerberos (or Cerberus), known in Greek mythology as being the monstrous three-headed guard dog of Hades. Several versions of the protocol exist; versions 1–3 used only internally at MIT. Steve Miller and Clifford Neuman , the primary designers of Kerberos version 4 (which used the DES encryption algorithm with 56-bit keys), published that version in 1989, although they had targeted it primarily for Project Athena. Version 5, designed by John Kohl and Clifford Neuman, appeared as RFC 1510 in 1993 (made obsolete by RFC 4120 in 2005), with the intention of overcoming the limitations and security problems of Version 4. The MIT makes an implementation of Kerberos Version 5 freely available, under a software license similar to that used by BSD license. Several companies used Kerberos Version 5 in commercial software including: :* Microsoft's Windows 2000 and later use Kerberos as their default authentication method. Some Microsoft additions to the Kerberos suite of protocols are documented in RFC 3244 \"Microsoft Windows 2000 Kerberos Change Password and Set Password Protocols\". RFC 4757 documents Microsoft's use of the RC4 cipher. While Microsoft uses the Kerberos protocol, it does not use the MIT software. :* Apple's Mac OS X also uses Kerberos in both its client and server versions. :* Red Hat Linux version 4 and later uses Kerberos in both client and server versions. In 2005, the IETF Kerberos working group introduced a new updated specifications for Kerberos Version 5 . updates include: :* \"Encryption and Checksum Specifications\" (RFC 3961), :* \"Advanced Encryption Standard (AES) Encryption for Kerberos 5\" (RFC 3962), :* A new edition of the Kerberos Version 5 specification \"The Kerberos Network Authentication Service (V5)\" (RFC 4120). This version obsoletes RFC 1510, clarifies aspects of the protocol and intended use in a more detailed clear explanation, :* A new edition of the GSS-API specification \"The Kerberos Version 5 Generic Security Service Application Program Interface (GSS-API) Mechanism: Version 2.\" (RFC 4121). In 2007, MIT formed the Kerberos Consortium for continuation of development. == Protocol == Kerberos uses as its basis the Needham-Schroeder protocol. It makes use of a trusted third party authentication known as \"key distribution center (KDC)\", which consists of two logically separate parts: an Authentication Server (AS) and a Ticket Granting Server (TGS). Kerberos works on the basis of \"tickets\" (called Kerberos tickets) which serve to prove the identity of users. Kerberos database: The key distribution center (KDC) maintains a database of secret keys; each entity on the network — whether a client or a server — shares a secret key known only to itself and to the KDC. Knowledge of this key serves to prove the identity of each entity. For communication between two entities, the KDC generates a session key which they can use to secure their communications. The term \"Kerberos server\" generally refers to the KDC. For reliability purposes, it is possible to have backup KDCs. These are referred to as \"Kerberos slave servers\". All slaves synchronize their databases from the master Kerberos server. The term \"Kerberized application server\" generally refers to Kerberized programs that clients communicate with using Kerberos tickets for authentication. For example, the Kerberos telnet server is an example of a Kerberized application server . While the term \"Kerberized applications\" is used to referrer to the client side of Kerberized application server , For example, the Kerberos telnet client is an example of a Kerberized applications The security of the protocol depends heavily on: # Participants maintaining loosely synchronized time. # A Short-lived declaration of authenticity: the Kerberos tickets. === Simplified description of the protocol === The following abbreviations will be used: :* AS = Authentication Server :* TGS = Ticket Granting Server :* SS or Server = Service Server (Server user requesting its service, such as a print server, a file server,etc...) :* TGT = Ticket Granting Ticket (Kerberos ticket for the TGS. Prepared by AS, then used to talk with TGS). Briefly, the client authenticates to AS using a long-term shared secret and receives a ticket from the AS. Later the client can use this ticket to get additional tickets for SS using the same shared secret. These tickets can be used to prove authentication to SS. === The protocol in more detail === User Client-based Logon Steps: # A user enters a username and password on the client machine. # The client performs a one-way function (mostly a Hash function) on the entered password, and this becomes the secret key of the client/user. Client Authentication Steps: # The client sends a cleartext message to the AS requesting services on behalf of the user. Sample message: \"User XYZ would like to request services\". Note: Neither the secret key nor the password is sent to the AS. # The AS checks to see if the client is in its database. If it is, the AS sends back the following two messages to the client: #* Message A: Client/TGS Session Key encrypted using the secret key of the client/user. #* Message B: TGT (which includes the client ID, client network address, ticket validity period, and the Client/TGS Session Key) encrypted using the secret key of the TGS. # Once the client receives messages A and B, it decrypts message A to obtain the Client/TGS Session Key. This session key is used for further communications with TGS. At this point, the client has enough information to authenticate itself to the TGS. Note: The client cannot decrypt Message B, as it is encrypted using TGS's secret key. Client Service Authorization Steps: # When requesting services, the client sends the following two messages to the TGS: #* Message C: Composed of the TGT from message B and the ID of the requested service. #* Message D: Authenticator (which is composed of the client ID and the timestamp), encrypted using the Client/TGS Session Key. # Upon receiving messages C and D, the TGS retrieves message B out of message C. It decrypts message B using the TGS secret key. This gives it the Client/TGS Session Key. Using this key, the TGS decrypts message D (Authenticator) and sends the following two messages to the client: #* Message E: Client-to-Server ticket (which includes the client ID, client network address, validity period and Client/Server Session Key) encrypted using the SS secret key. #* Message F: Client/Server Session Key encrypted with the Client/TGS Session Key. Client Service Request Steps: # Upon receiving messages E and F from TGS, the client has enough information to authenticate itself to the SS. The client connects to the SS and sends the following two messages: #* Message E: from the previous step (the Client-to- Server ticket, encrypted using the SS secret key). #* Message G: a new Authenticator, which includes the client ID, timestamp and is encrypted using Client/Server Session Key. # The SS decrypts the ticket using its own secret key to retrieve the Client/Server Session Key. Using the sessions key, SS decrypts the Authenticator and sends the following message to the client to confirm its true identity and willingness to serve the client: #* Message H: the timestamp found in client's Authenticator plus 1, encrypted using the Client/Server Session Key. # The client decrypts the confirmation using the Client/Server Session Key and checks whether the timestamp is correctly updated. If so, then the client can trust the server and can start issuing service requests to the server. # The server provides the requested services to the client. == Drawbacks == * Single point of failure: It requires continuous availability of a central server. When the Kerberos server is down, no one can log in. This can be solved by using multiple Kerberos servers and emergency authentication mechanisms. * Kerberos requires the clocks of all involved hosts to be synchronized. The tickets have a time availability period and if the host clock is not synchronized with the Kerberos server clock, the authentication will fail. The default configuration requires that clock times are no more than 10 minutes apart. In practice Network Time Protocol (NTP) is usually used to keep the all hosts synchronized. * The administration protocol is not standardized and differs between server implementations. Password changes are described in RFC 3244. * Since the secret keys for all users are stored on the central server, a compromise of that server will compromise all users' secret keys. * A compromised client will compromise the user's password. ==Related pages== * Identity management * Secure remote password protocol (SRP) * Generic Security Services Application Program Interface (GSS- API) == References == * SDK Team, \"Microsoft Kerberos (Windows)\", MSDN Library aa378747(VS.85) * B. Clifford Neuman and Theodore Ts'o, Kerberos: An Authentication Service for Computer Networks, IEEE Communications, 32(9) pp33–38. September 1994. * John T. Kohl, B. Clifford Neuman, and Theodore Y. T'so, The Evolution of the Kerberos Authentication System. Distributed Open Systems, pp78–94. IEEE Computer Society Press, 1994. (Postscript format) * Cisco Systems Kerberos Overview- An Authentication Service for Open Network Systems == Other websites == * How Kerberos Authentication Works * Kerberos page at MIT * Kerberos Working Group at IETF * Kerberos Consortium at MIT * White Papers and Specifications at MIT * Kerberos How-to * The Kerberos FAQ * Heimdal Kerberos page at KTH * Shishi, a free Kerberos implementation for the GNU system * Designing an Authentication System: A Dialogue in Four Scenes. Humorous play concerning how the design of Kerberos evolved. * RFC 4120: The Kerberos Network Authentication Service (V5) * Description of Kerberos 5 in the SPORE library * Kerberos Authentication in Windows Server 2003 * Kerberos Tutorial * Novell Inc's Comment to the Proposed Settlement between Microsoft and the Department of Justice - Microsoft purposefully breaks Kerberos interoperability Category:Cryptography Category:Authentication methods",
 "title": "Kerberos (protocol)"
}